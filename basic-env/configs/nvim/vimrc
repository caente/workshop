" set shell=/bin/sh
"
"
let g:EclimCompletionMethod = 'omnifunc'
" pathogen
"execute pathogen#infect()
"filetype plugin indent on

set nocompatible              " be iMproved, required
filetype off                  " required

set mouse=a

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'scrooloose/nerdtree'

Plugin 'cloudhead/neovim-fuzzy'

Plugin 'rking/ag.vim'

Plugin 'vim-airline/vim-airline'

Plugin 'tpope/vim-fugitive'

Plugin 'terryma/vim-multiple-cursors'

Plugin 'jeffkreeftmeijer/vim-numbertoggle'

Plugin 'derekwyatt/vim-scala'

Plugin 'blueshirts/darcula'

Plugin 'altercation/vim-colors-solarized'

Plugin 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins'}

Plugin 'copy/deoplete-ocaml', { 'do': ':UpdateRemotePlugins'}

Plugin 'christoomey/vim-tmux-navigator'

Plugin 'mhartington/nvim-typescript'

Plugin 'HerringtonDarkholme/yats.vim'

Plugin 'parsonsmatt/intero-neovim'

Plugin 'neomake/neomake'

Plugin 'vim-scripts/AnsiEsc.vim'

Plugin 'vim-syntastic/syntastic'

Plugin 'yuratomo/w3m.vim'

Plugin 'jpalardy/vim-slime'


call vundle#end()            " required
filetype plugin indent on    " required

" line numbers
set number
:highlight LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE

" vertical slit for fugitive/Gdiff
set diffopt+=vertical

" http://stackoverflow.com/questions/1551231/highlight-variable-under-cursor-in-vim-like-in-netbeans
:autocmd CursorMoved * exe printf('match IncSearch /\V\<%s\>/', escape(expand('<cword>'), '/\'))

" highlight unwanted(trailing) whitespace
" + have this highlighting not appear whilst you are typing in insert mode
" + have the highlighting of whitespace apply when you open new buffers
" http://vim.wikia.com/wiki/Highlight_unwanted_spaces
:highlight ExtraWhitespace ctermbg=red guibg=red
:autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Colors
syntax on
syntax enable
set background=dark
let g:solarized_termcolors = 256
" colorscheme solarized
colorscheme darcula

" leader key
let mapleader = ','

" searching
set ignorecase smartcase incsearch hlsearch

" don't display welcome
set shortmess+=I

" Sets how many lines of history VIM has to remember
set history=700

"Always show current position
set ruler

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Turn backup off
set nobackup
set nowb
set noswapfile

" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 2 spaces
set shiftwidth=2
set tabstop=2

" Remap VIM 0 to first non-blank character
map 0 ^

" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Map <Space> to / (search) and Ctrl-<Space> to ? (backwards search)
map <space> /
map <c-space> ?

" Format scala code

set autoindent
filetype plugin indent on

let g:scala_sort_across_groups=1
map ,st :%!java -jar /Users/caente/.vim/scalariform.jar -f -q +spaceInsideParentheses +alignArguments +alignParameters +alignSingleLineCaseStatements +preserveDanglingCloseParenthesis +multilineScaladocCommentsStartOnFirstLine +spaceInsideParentheses +spacesWithinPatternBinders +spacesAroundMultiImports -alignSingleLineCaseStatements.maxArrowIndent=40 -indentSpaces=2 --stdin<CR> 

" Tagbar (http://blog.stwrt.ca/2012/10/31/vim-ctags)
nnoremap <silent> <Leader>b :TagbarToggle<CR>

nnoremap <C-p> :FuzzyOpen<CR>

" NerdTree
map <leader>n :NERDTreeToggle<cr>
map <leader>r :NERDTreeFind<cr>
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
" open a NERDTree automatically when vim starts up if no files were specified
" autocmd StdinReadPre * let s:std_in=1
" autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Buffers - explore/next/previous: leader-u, Alt-F12, leader-p.
nnoremap <silent> <leader>u :BufExplorer<CR>
nnoremap <silent> <M-F12> :bn<CR>
nnoremap <silent> <leader>p :bp<CR>

" Replace word under cursor globally
nnoremap <Leader>a :%s/\<<C-r><C-w>\>/

" http://vim.wikia.com/wiki/Change_cursor_shape_in_different_modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" pastetoggle http://stackoverflow.com/questions/2861627/paste-in-insert-mode
" set paste
set pastetoggle=<F2>

" Wildmenu completion: use for file exclusions"
set wildmenu
set wildmode=list:longest
set wildignore+=.hg,.git,.svn " Version Controls"
set wildignore+=*.aux,*.out,*.toc "Latex Indermediate files"
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg "Binary Imgs"
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest "Compiled Object files"
set wildignore+=*.spl "Compiled speolling world list"
set wildignore+=*.sw? "Vim swap files"
set wildignore+=*.DS_Store "OSX SHIT"
set wildignore+=*.luac "Lua byte code"
set wildignore+=migrations "Django migrations"
set wildignore+=*.pyc "Python Object codes"
set wildignore+=*.orig "Merge resolution files"
set wildignore+=*.class "java/scala class files"
set wildignore+=*/target/* "sbt target directory"
set wildignore+=*/cache/* "maven cache directory"
set wildignore+=*/classes/* "maven classes directory"

" Command-T Cache
let g:CommandTMaxCachedDirectories=0

" colorcolumn / print margin
:set colorcolumn=120

" bind K to grep word under cursor
nnoremap K :FuzzyGrep <C-R><C-W><CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
nnoremap \ :FuzzyGrep<SPACE>

" http://stackoverflow.com/questions/16743112/open-item-from-quickfix-window-in-vertical-split
autocmd! FileType qf nnoremap <buffer> <leader><Enter> <C-w><Enter><C-w>L

" When the page starts to scroll, keep the cursor 8 lines from the top and 8 lines from the bottom
set scrolloff=8

" ZoomWin
nmap <leader>o <c-w>o

" font size
" set guifont=Monaco:h13
" set guifont=Ubuntu\ Mono:h16
" set guifont=inconsolata:h16
" set guifont=Inconsolata\ for\ Powerline:h18
" set guifont=Fira\ Code:h16
set guifont=hack:h18

" By pressing ctrl + r in the visual mode you will be prompted to enter text
" to replace with. Press enter and then confirm each change you agree with 'y'
" or decline with 'n'.
vnoremap <C-r> "hy:%s/<C-r>h//gc<left><left><left>

" creates a new line without enter in insert mode, by pressing enter,
" shift-enter to create the line before the current line
nmap <S-Enter> O<Esc>
nmap <CR> o<Esc>

set laststatus=2

let g:bufferline_echo = 0

set colorcolumn=160

let g:airline_powerline_fonts = 1

" check file change every 4 seconds ('CursorHold') and reload the buffer upon
" detecting change
set autoread                                                                                                                                                                                    
au CursorHold * checktime

" scrooloose/syntastic settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" only hide the buffers, so the undo history is preserved
set hidden 

" au FileType scala nnoremap <localleader>df :EnDeclaration<CR>

" change cursor shape in insert mode
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
" true color
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

" deoplete
let g:deoplete#enable_at_startup = 1
let g:deoplete#omni#input_patterns = {}
let g:deoplete#omni#input_patterns.scala = ['[^. *\t]\.\w*', '[:\[,] ?\w*', '^import .*']
let g:deoplete#complete_method = "complete"

set clipboard+=unnamedplus

" " Copy to clipboard
vnoremap  <leader>y  "+y
nnoremap  <leader>Y  "+yg_
nnoremap  <leader>y  "+y

" " Paste from clipboard
nnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>p "+p
vnoremap <leader>P "+P

" markdown preview
" let vim_markdown_preview_browser='Firefox'
let vim_markdown_preview_github=1
let vim_markdown_preview_hotkey='<C-m>'


let g:python3_host_prog = '/usr/bin/python3'

let g:tmux_navigator_no_mappings = 1

nnoremap <silent> <c-Left> :TmuxNavigateLeft<cr>
nnoremap <silent> <c-Down> :TmuxNavigateDown<cr>
nnoremap <silent> <c-Up> :TmuxNavigateUp<cr>
nnoremap <silent> <c-Right> :TmuxNavigateRight<cr>

let g:syntastic_ocaml_checkers = ['merlin']

" easy type inspection
map <leader>t :MerlinTypeOf<cr>

map <leader>j :MerlinLocate<cr>

" slime
let g:slime_target = "tmux"
let g:slime_paste_file = "$HOME/.slime_paste"
